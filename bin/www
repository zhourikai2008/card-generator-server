#!/usr/bin/env node
//require('oneapm');
/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('untitled:server');
const http = require('http');
const CONFIG = require('../config/config');
const OS = require('os');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || CONFIG.ServerPort);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return 80;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return 80;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${port} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${port} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function getNetwork() {
  const ifaces = OS.networkInterfaces();
  let network = [];

  for (let dev in ifaces) {
    const iface = ifaces[dev];
    iface.map(item => {
      if (item.family === 'IPv4' && !item.internal) {
        network.push(item.address);
      }
    })
  }

  return network;
}

function onListening() {
  const addr = server.address();
  const network = getNetwork();

  let text = `\n  App running at:` +
      `\n  - Local:   http://localhost:${addr.port}/ (copied to clipboard)`;
  network.map(item => {
    text += `\n  - Network: http://${item}:${addr.port}/`;
  });

  debug(text);
  console.log(text);
}